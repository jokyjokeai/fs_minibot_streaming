#!/usr/bin/env python3
"""
Setup Database - MiniBotPanel v3

Initialise la base de donn√©es PostgreSQL.

Fonctionnalit√©s:
- Cr√©ation tables (Contact, Campaign, Call, CallEvent)
- Test connexion
- Migration schema si n√©cessaire
- Donn√©es de test optionnelles

Utilisation:
    python setup_database.py
    python setup_database.py --test-data
    python setup_database.py --reset (‚ö†Ô∏è supprime toutes les donn√©es)
"""

import argparse
import logging
from sqlalchemy import text

from system.database import engine, SessionLocal, init_database, test_connection
from system.models import Base, Contact, Campaign
from system.config import config

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def create_tables():
    """Cr√©e toutes les tables dans la base de donn√©es."""
    logger.info("üìä Cr√©ation des tables...")

    try:
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ Tables cr√©√©es avec succ√®s")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation tables: {e}")
        return False


def drop_tables():
    """Supprime toutes les tables (‚ö†Ô∏è DESTRUCTIF)."""
    logger.warning("‚ö†Ô∏è SUPPRESSION DE TOUTES LES TABLES...")

    try:
        Base.metadata.drop_all(bind=engine)
        logger.info("‚úÖ Tables supprim√©es")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur suppression tables: {e}")
        return False


def create_test_data():
    """Cr√©e des donn√©es de test."""
    logger.info("üß™ Cr√©ation de donn√©es de test...")

    db = SessionLocal()
    try:
        # Contacts de test
        test_contacts = [
            Contact(
                phone="+33612345678",
                first_name="Jean",
                last_name="Dupont",
                email="jean.dupont@example.com",
                company="Entreprise A"
            ),
            Contact(
                phone="+33687654321",
                first_name="Marie",
                last_name="Martin",
                email="marie.martin@example.com",
                company="Entreprise B"
            ),
            Contact(
                phone="+33698765432",
                first_name="Pierre",
                last_name="Bernard",
                email="pierre.bernard@example.com",
                company="Entreprise C"
            )
        ]

        for contact in test_contacts:
            db.add(contact)

        db.commit()

        logger.info(f"‚úÖ {len(test_contacts)} contacts de test cr√©√©s")

        # Campagne de test
        test_campaign = Campaign(
            name="Campagne de Test",
            description="Campagne cr√©√©e automatiquement pour les tests",
            scenario="production"
        )
        db.add(test_campaign)
        db.commit()

        logger.info("‚úÖ 1 campagne de test cr√©√©e")

    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå Erreur cr√©ation donn√©es test: {e}")
    finally:
        db.close()


def show_stats():
    """Affiche les statistiques de la base de donn√©es."""
    db = SessionLocal()
    try:
        contact_count = db.query(Contact).count()
        campaign_count = db.query(Campaign).count()

        logger.info("\nüìä STATISTIQUES BASE DE DONN√âES")
        logger.info("=" * 40)
        logger.info(f"Contacts: {contact_count}")
        logger.info(f"Campagnes: {campaign_count}")
        logger.info("=" * 40)

    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration stats: {e}")
    finally:
        db.close()


def main():
    parser = argparse.ArgumentParser(description="Initialiser la base de donn√©es")
    parser.add_argument(
        "--reset",
        action="store_true",
        help="‚ö†Ô∏è Supprimer et recr√©er toutes les tables (DESTRUCTIF)"
    )
    parser.add_argument(
        "--test-data",
        action="store_true",
        help="Cr√©er des donn√©es de test"
    )

    args = parser.parse_args()

    logger.info("üöÄ SETUP BASE DE DONN√âES")
    logger.info("=" * 60)
    logger.info(f"Database URL: {config.DATABASE_URL}")
    logger.info("=" * 60)

    # Test connexion
    logger.info("\n1Ô∏è‚É£ Test de connexion...")
    if not test_connection():
        logger.error("‚ùå Impossible de se connecter √† la base de donn√©es")
        logger.info("üí° V√©rifiez que PostgreSQL est d√©marr√© et configur√©")
        return

    # Reset si demand√©
    if args.reset:
        logger.info("\n‚ö†Ô∏è MODE RESET ACTIV√â")
        confirm = input("√ätes-vous s√ªr de vouloir SUPPRIMER toutes les donn√©es ? (tapez 'RESET'): ")
        if confirm != "RESET":
            logger.info("‚ùå Annul√©")
            return

        logger.info("\n2Ô∏è‚É£ Suppression des tables...")
        drop_tables()

    # Cr√©er tables
    logger.info("\n3Ô∏è‚É£ Cr√©ation des tables...")
    if not create_tables():
        return

    # Donn√©es de test
    if args.test_data:
        logger.info("\n4Ô∏è‚É£ Cr√©ation de donn√©es de test...")
        create_test_data()

    # Stats finales
    logger.info("\n5Ô∏è‚É£ Statistiques finales")
    show_stats()

    logger.info("\n‚úÖ Setup base de donn√©es termin√©!")


if __name__ == "__main__":
    main()
